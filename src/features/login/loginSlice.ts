import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';
import { RootState } from '../../app/store';
import { AuthState, Credentials } from '../../utils/types/auth.types';
import { User } from '../../utils/types/user.type';
import { auth } from './loginAPI';


const initialState: AuthState = {
  token: '',
  status: 'idle',
};

export const getAuth = createAsyncThunk(
  'auth',
  async (values:Credentials) => {
    const response = await auth(values.email, values.password);
    // The value we return becomes the `fulfilled` action payload
    
    return response.data;
  }
);

export const authSlice = createSlice({
  name: 'hotelList',
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {},
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      .addCase(getAuth.pending, (state) => {
        state.status = 'loading';
      })
      .addCase(getAuth.fulfilled, (state, action) => {
        state.dataUser = action.payload.dataUser;
        state.authPermissions = action.payload.authPermissions;
        state.status = 'idle';
        sessionStorage.setItem('userId', action.payload.dataUser!._id);
        sessionStorage.setItem('token', action.payload.token);
      })
      .addCase(getAuth.rejected, (state) => {
        state.status = 'failed';
      });
  },
});

export const authUser = (state: RootState) => state.auth;

export default authSlice.reducer;
